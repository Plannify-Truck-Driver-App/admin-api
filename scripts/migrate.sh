#!/bin/bash

# Script de gestion des migrations SQLx
# Usage: ./scripts/migrate.sh [create|up|down|info|reset]

set -e

# Configuration
DATABASE_URL="postgresql://plannify_user:plannify_password@localhost:5432/plannify_db"
MIGRATIONS_DIR="migrations"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'aide
show_help() {
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commandes disponibles:"
    echo "  create <name>  Cr√©er une nouvelle migration"
    echo "  up             Ex√©cuter toutes les migrations en attente"
    echo "  down           Annuler la derni√®re migration"
    echo "  info           Afficher le statut des migrations"
    echo "  reset          R√©initialiser la base de donn√©es (supprime toutes les donn√©es !)"
    echo "  help           Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 create add_user_profile"
    echo "  $0 up"
    echo "  $0 info"
}

# V√©rifier que sqlx-cli est install√©
check_sqlx() {
    if ! command -v sqlx &> /dev/null; then
        echo -e "${RED}‚ùå sqlx-cli n'est pas install√©${NC}"
        echo "Installez-le avec: cargo install sqlx-cli --no-default-features --features postgres"
        exit 1
    fi
}

# V√©rifier la connexion √† la base de donn√©es
check_db_connection() {
    echo -e "${BLUE}üîç V√©rification de la connexion √† la base de donn√©es...${NC}"
    
    if ! sqlx database ping --database-url "$DATABASE_URL" &> /dev/null; then
        echo -e "${RED}‚ùå Impossible de se connecter √† la base de donn√©es${NC}"
        echo "V√©rifiez que PostgreSQL est d√©marr√© et accessible"
        echo "URL: $DATABASE_URL"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Connexion √† la base de donn√©es √©tablie${NC}"
}

# Cr√©er une nouvelle migration
create_migration() {
    local name="$1"
    
    if [ -z "$name" ]; then
        echo -e "${RED}‚ùå Nom de migration requis${NC}"
        echo "Usage: $0 create <name>"
        exit 1
    fi
    
    echo -e "${BLUE}üìù Cr√©ation de la migration: $name${NC}"
    
    # Cr√©er la migration avec sqlx
    sqlx migrate add "$name" --source "$MIGRATIONS_DIR"
    
    echo -e "${GREEN}‚úÖ Migration cr√©√©e avec succ√®s${NC}"
    echo "Fichier cr√©√© dans: $MIGRATIONS_DIR/"
}

# Ex√©cuter les migrations
run_migrations() {
    echo -e "${BLUE}üöÄ Ex√©cution des migrations...${NC}"
    
    sqlx migrate run --source "$MIGRATIONS_DIR" --database-url "$DATABASE_URL"
    
    echo -e "${GREEN}‚úÖ Migrations ex√©cut√©es avec succ√®s${NC}"
}

# Annuler la derni√®re migration
rollback_migration() {
    echo -e "${YELLOW}‚ö†Ô∏è  Annulation de la derni√®re migration...${NC}"
    
    sqlx migrate revert --source "$MIGRATIONS_DIR" --database-url "$DATABASE_URL"
    
    echo -e "${GREEN}‚úÖ Derni√®re migration annul√©e${NC}"
}

# Afficher le statut des migrations
show_migration_status() {
    echo -e "${BLUE}üìä Statut des migrations:${NC}"
    
    sqlx migrate info --source "$MIGRATIONS_DIR" --database-url "$DATABASE_URL"
}

# R√©initialiser la base de donn√©es
reset_database() {
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es !${NC}"
    echo -e "${YELLOW}√ätes-vous s√ªr de vouloir continuer ? (y/N)${NC}"
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üóëÔ∏è  Suppression de la base de donn√©es...${NC}"
        
        sqlx database drop --database-url "$DATABASE_URL" --yes
        
        echo -e "${BLUE}üîÑ Recr√©ation de la base de donn√©es...${NC}"
        sqlx database create --database-url "$DATABASE_URL"
        
        echo -e "${BLUE}üöÄ Ex√©cution des migrations...${NC}"
        sqlx migrate run --source "$MIGRATIONS_DIR" --database-url "$DATABASE_URL"
        
        echo -e "${GREEN}‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s${NC}"
    else
        echo -e "${YELLOW}‚ùå Op√©ration annul√©e${NC}"
    fi
}

# Script principal
main() {
    local command="$1"
    
    case "$command" in
        "create")
            create_migration "$2"
            ;;
        "up")
            check_sqlx
            check_db_connection
            run_migrations
            ;;
        "down")
            check_sqlx
            check_db_connection
            rollback_migration
            ;;
        "info")
            check_sqlx
            check_db_connection
            show_migration_status
            ;;
        "reset")
            check_sqlx
            check_db_connection
            reset_database
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $command${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@"
